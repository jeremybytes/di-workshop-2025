Since you want to use the hardware in production, you made it a default by using Property Injection. If you do nothing, then the serial hardware is used. But you still have a "seam" in the code where you can inject a fake object when needed.  


----


* Make the time provider an optional constructor parameter so that it can be changed for a fake time provider unit testing.  

----


There are a variety of ways to organize tests. For this solution, the test projects match the project under test: `HouseControl.Library.Test` => `HouseControl.Library`. In addition, the test classes match the class under test: `ScheduleHelper.Test` => `ScheduleHelper`. This is just one approach to organizing tests which works well for this solution.  


2. This project is already configured to use xUnit as a testing framework. In addition, a data file used for testing is automatically copied into a folder where the tests have access to it. A field is set to the test file location:  

```csharp
readonly string fileName = AppDomain.CurrentDomain.BaseDirectory + "\\ScheduleData";
```   

3. Run the existing tests.  
**Visual Studio 2022:** Open the test explorer from the "Test" menu. Then click the "Run all in View" button on the far left.  
**Visual Studio Code:** From the command line, navigate to the "HouseControl.Library.Test" folder and type `dotnet test`.  

The test results will report "Failed". This is because all of the test stubs have `Assert.Fail()` calls as placeholders.  


----

----

